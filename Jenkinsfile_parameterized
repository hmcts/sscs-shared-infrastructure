#!groovy
import groovy.json.JsonSlurper

@Library('Infrastructure') _

properties([
    parameters([
			choice(name: 'ENVIRONMENT', choices: 'sprod', description: 'Environment where code should be build and deployed')
		]),
   [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '30']]
])

echo "Building SSCS infrastructure in environment '${params.ENVIRONMENT}'"

// Derive subscription from environment
switch (params.ENVIRONMENT) {
    case "sandbox": subscription = "sandbox"; break;
    case "sprod": subscription = "sandbox"; break;
    case "aat": subscription = "nonprod"; break;
    case "prod": subscription = "prod"; break;
    default: error("Invalid environment: ${params.ENVIRONMENT}")
}

vaultName = "infra-vault-" + subscription
ssh_key_public = "sscs-sftp-admin-public-key-" + environment
ssh_key_private = "sscs-sftp-admin-private-key-" + environment
sftp_admin_username = "dojenkins"

node {
  env.PATH = "$env.PATH:/usr/local/bin"

  def az = { cmd -> return sh(script: "env AZURE_CONFIG_DIR=/opt/jenkins/.azure-$subscription az $cmd", returnStdout: true).trim() }

  stage('Variables') {
    sftp_admin_ssh_key_private = az "keyvault secret show --vault-name '${vaultName}' --name ${ssh_key_private} --query value -o tsv"
    env.TF_VAR_environment = "${params.ENVIRONMENT}"
    env.TF_VAR_subscription_name = "${subscription}"
    env.TF_VAR_sftp_admin_username = "${sftp_admin_username}"

    println("DEBUG: ENVIRONMENT=${params.ENVIRONMENT} and SUBSCRIPTION=${subscription}")
    println("DEBUG: env.TF_VAR_environment=${env.TF_VAR_environment}")
  }

  stage('Checkout') {
    deleteDir()
    checkout scm
  }

  stage('Tools') {
    sh '''
     #!/bin/bash
     az --version | head -1
    '''
  }

  stage('Infrastructure') {
    sharedInfrastructurePipeline('sscs', params.ENVIRONMENT, subscription)
  }

  stage('Ansible') {
    ssh_key_private = sh(returnStdout: true, script: "#!/bin/sh +x\necho '${sftp_admin_ssh_key_private}' | base64 --decode").trim()
    // TODO: Checkout cnp-sftp-config + ansible-management if required
    // TODO: Run ansible using private ssh key to connect
  }
}
